import * as tslib_1 from "tslib";
var RootActions = {
    /**
     * Create new data with all fields filled by default values.
     */
    new: function (context, payload) {
        var result = { data: {} };
        context.commit('new', tslib_1.__assign({}, payload, { result: result }));
        return result.data;
    },
    /**
     * Save given data to the store by replacing all existing records in the
     * store. If you want to save data without replacing existing records,
     * use the `insert` method instead.
     */
    create: function (context, payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_a) {
                result = { data: {} };
                context.commit('create', tslib_1.__assign({}, payload, { result: result }));
                return [2 /*return*/, result.data];
            });
        });
    },
    /**
     * Insert given data to the state. Unlike `create`, this method will not
     * remove existing data within the state, but it will update the data
     * with the same primary key.
     */
    insert: function (context, payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_a) {
                result = { data: {} };
                context.commit('insert', tslib_1.__assign({}, payload, { result: result }));
                return [2 /*return*/, result.data];
            });
        });
    },
    /**
     * Update data in the store.
     */
    update: function (context, payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_a) {
                result = { data: {} };
                context.commit('update', tslib_1.__assign({}, payload, { result: result }));
                return [2 /*return*/, result.data];
            });
        });
    },
    /**
     * Insert or update given data to the state. Unlike `insert`, this method
     * will not replace existing data within the state, but it will update only
     * the submitted data with the same primary key.
     */
    insertOrUpdate: function (context, payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_a) {
                result = { data: {} };
                context.commit('insertOrUpdate', tslib_1.__assign({}, payload, { result: result }));
                return [2 /*return*/, result.data];
            });
        });
    },
    /**
     * Delete data from the store.
     */
    delete: function (context, payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_a) {
                result = { data: {} };
                context.commit('delete', tslib_1.__assign({}, payload, { result: result }));
                return [2 /*return*/, result.data];
            });
        });
    },
    /**
     * Delete all data from the store.
     */
    deleteAll: function (context, payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (payload && payload.entity) {
                    context.commit('deleteAll', { entity: payload.entity });
                    return [2 /*return*/];
                }
                context.commit('deleteAll');
                return [2 /*return*/];
            });
        });
    }
};
export default RootActions;
//# sourceMappingURL=RootActions.js.map