import * as tslib_1 from "tslib";
var Actions = {
    /**
     * Create new data with all fields filled by default values.
     */
    new: function (context) {
        var state = context.state;
        var entity = state.$name;
        return context.dispatch(state.$connection + "/new", { entity: entity }, { root: true });
    },
    /**
     * Save given data to the store by replacing all existing records in the
     * store. If you want to save data without replacing existing records,
     * use the `insert` method instead.
     */
    create: function (context, payload) {
        var state = context.state;
        var entity = state.$name;
        return context.dispatch(state.$connection + "/create", tslib_1.__assign({}, payload, { entity: entity }), { root: true });
    },
    /**
     * Insert given data to the state. Unlike `create`, this method will not
     * remove existing data within the state, but it will update the data
     * with the same primary key.
     */
    insert: function (context, payload) {
        var state = context.state;
        var entity = state.$name;
        return context.dispatch(state.$connection + "/insert", tslib_1.__assign({}, payload, { entity: entity }), { root: true });
    },
    /**
     * Update data in the store.
     */
    update: function (context, payload) {
        var state = context.state;
        var entity = state.$name;
        // If the payload is an array, then the payload should be an array of
        // data so let's pass the whole payload as data.
        if (Array.isArray(payload)) {
            return context.dispatch(state.$connection + "/update", { entity: entity, data: payload }, { root: true });
        }
        // If the payload doesn't have `data` property, we'll assume that
        // the user has passed the object as the payload so let's define
        // the whole payload as a data.
        if (payload.data === undefined) {
            return context.dispatch(state.$connection + "/update", { entity: entity, data: payload }, { root: true });
        }
        // Else destructure the payload and let root action handle it.
        return context.dispatch(state.$connection + "/update", tslib_1.__assign({ entity: entity }, payload), { root: true });
    },
    /**
     * Insert or update given data to the state. Unlike `insert`, this method
     * will not replace existing data within the state, but it will update only
     * the submitted data with the same primary key.
     */
    insertOrUpdate: function (context, payload) {
        var state = context.state;
        var entity = state.$name;
        return context.dispatch(state.$connection + "/insertOrUpdate", tslib_1.__assign({ entity: entity }, payload), { root: true });
    },
    /**
     * Delete data from the store.
     */
    delete: function (context, payload) {
        var state = context.state;
        var entity = state.$name;
        var where = typeof payload === 'object' ? payload.where : payload;
        return context.dispatch(state.$connection + "/delete", { entity: entity, where: where }, { root: true });
    },
    /**
     * Delete all data from the store.
     */
    deleteAll: function (context) {
        var state = context.state;
        var entity = state.$name;
        return context.dispatch(state.$connection + "/deleteAll", { entity: entity }, { root: true });
    }
};
export default Actions;
//# sourceMappingURL=Actions.js.map